{"version":3,"sources":["components/MdiIcon.tsx","utils/jsx.ts","components/AppAction.tsx","stores/currentModeStore.ts","components/AppActions.tsx","components/AppContent.tsx","components/AppFooter.tsx","components/AppHeader.tsx","components/FooterLink.tsx","components/FooterText.tsx","services/localStorageService.ts","stores/hiddenLinksStore.ts","utils/misc.ts","components/DefaultIcon.tsx","components/Link.tsx","components/LinkGroup.tsx","components/LinkList.tsx","links.ts","components/SearchTargetItem.tsx","components/Search.tsx","App.tsx","index.tsx"],"names":["MdiIcon","memo","className","path","color","Icon","style","width","height","classes","classesObject","result","Object","entries","push","join","AppMode","AppAction","icon","action","actionClasses","active","onClick","AppActions","children","AppContent","AppFooter","AppHeader","FooterLink","text","url","href","FooterText","initialState","mode","default","currentModeStore","createStore","useCurrentMode","createReactHook","setMode","set","toggleMode","state","setHiddenLinks","values","storageString","JSON","stringify","localStorage","setItem","Error","links","key","getItem","storageValue","parse","Array","isArray","some","value","removeItem","getHiddenLinks","hiddenLinksStore","useHiddenLinks","mutations","link","concat","filter","it","getIconUrl","process","REACT_APP_PUBLIC_URL","DefaultIcon","mdiLinkVariant","Link","title","searchable","customize","visible","focus","linkClasses","rel","event","preventDefault","includes","toggleLink","undefined","src","mdiEye","mdiEyeOff","LinkGroup","name","LinkList","hiddenLinks","map","group","items","every","SearchTargetItem","Search","latestKeypress","useState","keyboardIndex","setKeyboardIndex","searchTerm","setSearchTerm","searchTarget","setSearchTarget","inputElement","useRef","visibleLinks","flatMap","results","fuzzy","go","allowTypo","limit","focusedResult","useEffect","current","useSearch","handleGlobalKeyDown","window","addEventListener","removeEventListener","hints","resultElements","total","obj","searchUrl","ref","type","placeholder","onChange","currentTarget","onKeyDown","focusedItem","replace","getUrl","ctrlKey","open","location","shiftKey","Math","max","min","WebdevHome","handleGlobalKeydown","document","handleCustomizeAction","useCustomizeFeature","setLatestKeypress","handleGlobalKeypress","search","handleSearchAction","useSearchFeature","mdiMagnify","mdiFormatListChecks","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.33043e9d.chunk.js","sourcesContent":["import { Icon } from '@mdi/react'\r\nimport React, { FC, memo } from 'react'\r\n\r\ninterface MdiIconProps {\r\n  path: string\r\n  className?: string\r\n  color?: string\r\n}\r\n\r\nexport const MdiIcon: FC<MdiIconProps> = memo(({ className, path, color }) => {\r\n  const iconStyle = { width: 24, height: 24 }\r\n\r\n  return (\r\n    <Icon\r\n      className={className}\r\n      path={path}\r\n      style={iconStyle}\r\n      color={color}\r\n    />\r\n  )\r\n})\r\n","export function classes (classesObject: Record<string, boolean>): string {\r\n  const result: string[] = []\r\n\r\n  for (const [className, condition] of Object.entries(classesObject)) {\r\n    if (condition === true) {\r\n      result.push(className)\r\n    }\r\n  }\r\n\r\n  return result.join(' ')\r\n}\r\n","import React, { FC, memo } from 'react'\r\nimport { MdiIcon } from './MdiIcon'\r\nimport { classes } from '../utils/jsx'\r\n\r\ninterface AppActionProps {\r\n  icon: string\r\n  active: boolean\r\n  action(): void\r\n}\r\n\r\nexport const AppAction: FC<AppActionProps> = memo(({\r\n  icon, action, active\r\n}) => {\r\n  const actionClasses = {\r\n    'app-action': true,\r\n    'app-action--is-active': active\r\n  }\r\n\r\n  return (\r\n    <div className={classes(actionClasses)} onClick={action}>\r\n      <MdiIcon path={icon} />\r\n    </div>\r\n  )\r\n})\r\n","import { createStore, createReactHook } from '@alinnert/tstate'\r\n\r\nexport enum AppMode { 'default', 'search', 'customize' }\r\n\r\ninterface CurrentMode {\r\n  mode: AppMode\r\n}\r\n\r\nconst initialState: CurrentMode = {\r\n  mode: AppMode.default\r\n}\r\n\r\nconst currentModeStore = createStore<CurrentMode>(initialState)\r\nexport const useCurrentMode = createReactHook(currentModeStore)\r\n\r\nexport function setMode (mode: AppMode): void {\r\n  currentModeStore.set({ mode })\r\n}\r\n\r\nexport function toggleMode (mode: AppMode): void {\r\n  currentModeStore.set({\r\n    mode: currentModeStore.state.mode === mode ? AppMode.default : mode\r\n  })\r\n}\r\n","import React, { FC, memo } from 'react'\r\n\r\nexport const AppActions: FC = memo(({ children }) => {\r\n  return (\r\n    <div className=\"app-actions\">{children}</div>\r\n  )\r\n})\r\n","import React, { FC, memo } from 'react'\r\n\r\nexport const AppContent: FC = memo(({ children }) => {\r\n  return (\r\n    <div className=\"app-content\">\r\n      {children}\r\n    </div>\r\n  )\r\n})\r\n","import React, { FC, memo } from 'react'\r\n\r\nexport const AppFooter: FC = memo(({ children }) => {\r\n  return (\r\n    <div className=\"app-footer\">{children}</div>\r\n  )\r\n})\r\n","import React, { FC, memo } from 'react'\r\n\r\nexport const AppHeader: FC = memo(() => {\r\n  return (\r\n    <div className=\"app-header\">\r\n      <div className=\"app-header__logo logo\">\r\n        <span className=\"logo__char-1\">Start</span>\r\n        <span className=\"logo__char-2\">page</span>\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n","import React, { FC, memo } from 'react'\r\n\r\ninterface FooterLinkProps {\r\n  text: string\r\n  url: string\r\n}\r\n\r\nexport const FooterLink: FC<FooterLinkProps> = memo(({ text, url }) => {\r\n  return (\r\n    <a href={url} className=\"footer-link\">{text}</a>\r\n  )\r\n})\r\n","import React, { FC, memo } from 'react'\r\n\r\nexport const FooterText: FC = memo(({ children }) => {\r\n  return (\r\n    <div className=\"footer-text\">\r\n      {children}\r\n    </div>\r\n  )\r\n})\r\n","type StorageKey = 'wdh:hidden-items'\r\n\r\nexport function getHiddenLinks (): string[] {\r\n  const key: StorageKey = 'wdh:hidden-items'\r\n  const storageString = localStorage.getItem(key)\r\n\r\n  if (storageString === null) { return [] }\r\n\r\n  try {\r\n    const storageValue = JSON.parse(storageString)\r\n\r\n    if (!Array.isArray(storageValue)) {\r\n      localStorage.removeItem(key)\r\n      return []\r\n    }\r\n\r\n    if (storageValue.some(value => typeof value !== 'string')) {\r\n      localStorage.removeItem(key)\r\n      return []\r\n    }\r\n\r\n    return storageValue\r\n  } catch {\r\n    localStorage.removeItem(key)\r\n    return []\r\n  }\r\n}\r\n\r\nexport function setHiddenLinks (values: string[]): void {\r\n  const key: StorageKey = 'wdh:hidden-items'\r\n\r\n  try {\r\n    const storageString = JSON.stringify(values)\r\n    localStorage.setItem(key, storageString)\r\n  } catch {\r\n    throw new Error('[setHiddenLinks()] Values cannot be serialized to JSON.')\r\n  }\r\n}\r\n","import { createReactHook, createStore } from '@alinnert/tstate'\r\nimport { getHiddenLinks, setHiddenLinks } from '../services/localStorageService'\r\n\r\n// #region store\r\nexport interface HiddenLinks {\r\n  links: string[]\r\n}\r\n\r\nconst initialState: HiddenLinks = {\r\n  links: getHiddenLinks()\r\n}\r\n\r\nconst hiddenLinksStore = createStore<HiddenLinks>(initialState)\r\nexport const useHiddenLinks = createReactHook(hiddenLinksStore)\r\n// #endregion store\r\n\r\n// #region mutations\r\nconst mutations = {\r\n  addUrl: (link: string): void => {\r\n    const links = hiddenLinksStore.state.links.concat(link)\r\n    hiddenLinksStore.set({ links })\r\n    setHiddenLinks(links)\r\n  },\r\n\r\n  removeUrl: (link: string): void => {\r\n    const links = hiddenLinksStore.state.links.filter(it => it !== link)\r\n    hiddenLinksStore.set({ links })\r\n    setHiddenLinks(links)\r\n  }\r\n}\r\n// #endregion mutations\r\n\r\n// #region actions\r\nexport function toggleLink (url: string): void {\r\n  if (hiddenLinksStore.state.links.includes(url)) {\r\n    mutations.removeUrl(url)\r\n  } else {\r\n    mutations.addUrl(url)\r\n  }\r\n}\r\n// #endregion actions\r\n","export function getIconUrl (icon: string): string {\r\n  return `${process.env.REACT_APP_PUBLIC_URL ?? ''}/simple-icons/${icon}.svg`\r\n}\r\n","import { mdiLinkVariant } from '@mdi/js'\r\nimport React, { FC, memo } from 'react'\r\nimport { MdiIcon } from './MdiIcon'\r\n\r\nexport const DefaultIcon: FC = memo(() => {\r\n  return (\r\n    <div className=\"default-icon\">\r\n      <MdiIcon path={mdiLinkVariant} color=\"#eee\" />\r\n    </div>\r\n  )\r\n})\r\n","import { mdiEye, mdiEyeOff } from '@mdi/js'\r\nimport React, { FC, memo, MouseEvent } from 'react'\r\nimport { ReactSVG } from 'react-svg'\r\nimport { toggleLink } from '../stores/hiddenLinksStore'\r\nimport { classes } from '../utils/jsx'\r\nimport { getIconUrl } from '../utils/misc'\r\nimport { DefaultIcon } from './DefaultIcon'\r\nimport { MdiIcon } from './MdiIcon'\r\n\r\ninterface LinkProps {\r\n  title: string\r\n  url: string\r\n  icon?: string\r\n  color?: string\r\n  searchable?: boolean\r\n  customize?: boolean\r\n  visible?: boolean\r\n  focus?: boolean\r\n}\r\n\r\nexport const Link: FC<LinkProps> = memo(({\r\n  title, url, icon, color, searchable = false,\r\n  customize = false, visible = true, focus = false\r\n}) => {\r\n  function handleLinkClick(event: MouseEvent<HTMLAnchorElement>): void {\r\n    if (customize) {\r\n      event.preventDefault()\r\n      toggleLink(url)\r\n    }\r\n  }\r\n\r\n  const linkClasses = {\r\n    link: true,\r\n    'link--is-visible': visible,\r\n    'link--has-focus': focus\r\n  }\r\n\r\n  if (!customize && !visible) return null\r\n\r\n  return (\r\n    <a\r\n      href={url}\r\n      rel=\"noreferrer\"\r\n      className={classes(linkClasses)}\r\n      onClick={handleLinkClick}\r\n    >\r\n      <div className=\"link__icon-container\" style={{ color }}>\r\n        {icon !== undefined ? (\r\n          <ReactSVG src={getIconUrl(icon)} className=\"link__icon\" />\r\n        ) : (\r\n          <DefaultIcon />\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"link__label\">{title}</div>\r\n\r\n      {searchable ? (\r\n        <div className=\"link__info\">\r\n          <span className=\"link__info-text\">\r\n            <kbd>Tab</kbd>: Search on site\r\n          </span>\r\n        </div>\r\n      ) : null}\r\n\r\n      {customize ? (\r\n        <div className=\"link__action\">\r\n          <MdiIcon path={visible ? mdiEye : mdiEyeOff} />\r\n        </div>\r\n      ) : null}\r\n    </a>\r\n  )\r\n})\r\n","import React, { FC, memo } from 'react'\r\n\r\ninterface LinkGroupProps {\r\n  name: string\r\n}\r\n\r\nexport const LinkGroup: FC<LinkGroupProps> = memo(({ children, name }) => {\r\n  return (\r\n    <div className=\"link-group\">\r\n      <div className=\"link-group__name\">{name}</div>\r\n      <div className=\"link-group__list\">\r\n        {children}\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n","import React, { FC, memo } from 'react'\r\nimport { LinkGroup as ILinkGroup } from '../links'\r\nimport { AppMode, useCurrentMode } from '../stores/currentModeStore'\r\nimport { Link } from './Link'\r\nimport { LinkGroup } from './LinkGroup'\r\n\r\ninterface LinkListProps {\r\n  links: ILinkGroup[]\r\n  hiddenLinks: string[]\r\n}\r\n\r\nexport const LinkList: FC<LinkListProps> = memo(({ links, hiddenLinks }) => {\r\n  const { mode } = useCurrentMode()\r\n\r\n  function getLinkGroup (group: ILinkGroup): JSX.Element | null {\r\n    const noVisibleLinksInGroup = group.items\r\n      .every(link => hiddenLinks.includes(link.url))\r\n\r\n    if (noVisibleLinksInGroup && mode !== AppMode.customize) { return null }\r\n\r\n    return (\r\n      <LinkGroup key={group.name} name={group.name}>\r\n        {group.items.map(link => (\r\n          <Link\r\n            key={link.url}\r\n            title={link.title}\r\n            url={link.url}\r\n            icon={link.icon}\r\n            color={link.color}\r\n            customize={mode === AppMode.customize}\r\n            visible={!hiddenLinks.includes(link.url)}\r\n          />\r\n        ))}\r\n      </LinkGroup>\r\n    )\r\n  }\r\n\r\n  return <>{links.map(getLinkGroup)}</>\r\n})\r\n","import linksData from './links.json'\r\nimport { OptionalExceptFor } from './utilityTypes'\r\n\r\nexport interface LinkItem {\r\n  title: string\r\n  url: string\r\n  icon?: string\r\n  color?: string\r\n  iconComp?: JSX.Element\r\n  searchUrl?: string\r\n  searchConcat?: string\r\n}\r\n\r\nexport type SearchTarget =\r\n  OptionalExceptFor<LinkItem, 'title' | 'url' | 'searchUrl'>\r\n\r\nexport interface LinkGroup {\r\n  name: string\r\n  items: LinkItem[]\r\n}\r\n\r\nexport interface Links {\r\n  items: LinkGroup[]\r\n}\r\n\r\nexport const links: Links = {\r\n  items: linksData.items\r\n}\r\n\r\nexport function getAllLinks (): LinkItem[] {\r\n  return links.items.flatMap(group => group.items)\r\n}\r\n","import React, { FC, memo } from 'react'\r\nimport { ReactSVG } from 'react-svg'\r\nimport { LinkItem } from '../links'\r\nimport { getIconUrl } from '../utils/misc'\r\n\r\ninterface SearchTargetItemProps {\r\n  title: LinkItem['title']\r\n  icon: LinkItem['icon']\r\n  color: LinkItem['color']\r\n}\r\n\r\nexport const SearchTargetItem: FC<SearchTargetItemProps> = memo(\r\n  function SearchTargetItem ({ title, icon, color }) {\r\n    return (\r\n      <div className=\"search-target-item\">\r\n        Search on {icon !== undefined ? (\r\n          <span\r\n            className=\"search-target-item__icon-container\"\r\n            style={{ color }}\r\n          >\r\n            <ReactSVG\r\n              src={getIconUrl(icon)}\r\n              className=\"search-target-item__icon\"\r\n            />\r\n          </span>\r\n        ) : null} {title}:\r\n      </div>\r\n    )\r\n  }\r\n)\r\n","import fuzzy from 'fuzzysort'\r\nimport React, { ChangeEvent, Dispatch, FC, KeyboardEvent as ReactKeyboardEvent, memo, RefObject, SetStateAction, useEffect, useRef, useState } from 'react'\r\nimport { getAllLinks, LinkItem, SearchTarget } from '../links'\r\nimport { AppMode, setMode } from '../stores/currentModeStore'\r\nimport { useHiddenLinks } from '../stores/hiddenLinksStore'\r\nimport { Link } from './Link'\r\nimport { SearchTargetItem } from './SearchTargetItem'\r\n\r\ninterface SearchProps {\r\n  latestKeypress: string\r\n}\r\n\r\nexport const Search: FC<SearchProps> = memo(({ latestKeypress }) => {\r\n  const {\r\n    searchTerm, setSearchTerm,\r\n    searchTarget, setSearchTarget,\r\n    keyboardIndex, setKeyboardIndex,\r\n    results, focusedResult,\r\n    inputElement\r\n  } = useSearch(latestKeypress)\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', handleGlobalKeyDown)\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', handleGlobalKeyDown)\r\n    }\r\n  })\r\n\r\n  function handleInputChange (event: ChangeEvent<HTMLInputElement>): void {\r\n    setSearchTerm(event.currentTarget.value)\r\n    setKeyboardIndex(0)\r\n  }\r\n\r\n  function handleInputKeyDown (event: ReactKeyboardEvent<HTMLInputElement>): void {\r\n    switch (event.key) {\r\n      case 'Backspace': {\r\n        if (searchTerm !== '') { return }\r\n\r\n        if (searchTarget !== null) {\r\n          setSearchTarget(null)\r\n        } else {\r\n          setMode(AppMode.default)\r\n        }\r\n        break\r\n      }\r\n\r\n      case 'Tab': {\r\n        event.preventDefault()\r\n\r\n        if (searchTarget !== null) { return }\r\n        if (focusedResult === null) { return }\r\n        if (focusedResult.obj.searchUrl === undefined) { return }\r\n\r\n        setSearchTarget(focusedResult.obj as SearchTarget)\r\n        setSearchTerm('')\r\n        break\r\n      }\r\n\r\n      case 'Enter': {\r\n        const url = getUrl(focusedResult?.obj ?? null, searchTarget, searchTerm)\r\n\r\n        if (url === null) { return }\r\n\r\n        if (event.ctrlKey) {\r\n          window.open(url, '', 'alwaysRaised=on')\r\n        } else {\r\n          window.location.href = url\r\n        }\r\n\r\n        if (event.ctrlKey || event.shiftKey) { setMode(AppMode.default) }\r\n        break\r\n      }\r\n\r\n      case 'ArrowUp': {\r\n        if (results === null) { return }\r\n        event.preventDefault()\r\n        setKeyboardIndex(Math.max(0, keyboardIndex - 1))\r\n        break\r\n      }\r\n\r\n      case 'ArrowDown': {\r\n        if (results === null) { return }\r\n        event.preventDefault()\r\n        setKeyboardIndex(Math.min(results.total - 1, keyboardIndex + 1))\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleGlobalKeyDown (event: KeyboardEvent): void {\r\n    if (event.key === 'Escape') {\r\n      if (searchTarget !== null) {\r\n        setSearchTarget(null)\r\n        setSearchTerm('')\r\n        return\r\n      }\r\n\r\n      setMode(AppMode.default)\r\n    }\r\n  }\r\n\r\n  const hints = <>\r\n    <div className=\"search__results-hint\">\r\n      Type ahead to filter links.\r\n    </div>\r\n    <div className=\"search__results-hint\">\r\n      <kbd>Return</kbd>\r\n      <div className=\"search__results-hint-description\">\r\n        Open link\r\n      </div>\r\n    </div>\r\n    <div className=\"search__results-hint\">\r\n      <kbd>Ctrl</kbd> + <kbd>Return</kbd>\r\n      <div className=\"search__results-hint-description\">\r\n        Open link in a new tab (background)\r\n      </div>\r\n    </div>\r\n    <div className=\"search__results-hint\">\r\n      <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Return</kbd>\r\n      <div className=\"search__results-hint-description\">\r\n        Open link in a new tab (foreground)\r\n      </div>\r\n    </div>\r\n  </>\r\n\r\n  const resultElements = <>\r\n    {results !== null && results.total > 0 ? (\r\n      results.map(link => (\r\n        <Link\r\n          key={link.obj.url}\r\n          title={link.obj.title}\r\n          url={link.obj.url}\r\n          icon={link.obj.icon}\r\n          searchable={link.obj.searchUrl !== undefined}\r\n          color={link.obj.color}\r\n          customize={false}\r\n          visible={true}\r\n          focus={link === focusedResult}\r\n        />\r\n      ))\r\n    ) : (\r\n      <div className=\"search__results-hint\">No results found...</div>\r\n    )}\r\n  </>\r\n\r\n  return (\r\n    <div className=\"search\">\r\n      {searchTarget !== null ? (\r\n        <SearchTargetItem\r\n          title={searchTarget.title}\r\n          icon={searchTarget.icon}\r\n          color={searchTarget.color}\r\n        />\r\n      ) : null}\r\n\r\n      <input\r\n        className=\"search__input\"\r\n        ref={inputElement}\r\n        type=\"text\"\r\n        value={searchTerm}\r\n        placeholder={searchTarget === null ? 'Search links...' : 'Search...'}\r\n        onChange={handleInputChange}\r\n        onKeyDown={handleInputKeyDown}\r\n      />\r\n\r\n      <div className=\"search__results\">\r\n        {searchTarget === null\r\n          ? (searchTerm === '' ? hints : resultElements)\r\n          : null\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n\r\ninterface UseSearch {\r\n  searchTerm: string\r\n  setSearchTerm: Dispatch<SetStateAction<string>>\r\n  searchTarget: SearchTarget | null\r\n  setSearchTarget: Dispatch<SetStateAction<SearchTarget | null>>\r\n  keyboardIndex: number\r\n  setKeyboardIndex: Dispatch<SetStateAction<number>>\r\n  results: Fuzzysort.KeyResults<LinkItem> | null\r\n  focusedResult: Fuzzysort.KeyResult<LinkItem> | null\r\n  inputElement: RefObject<HTMLInputElement>\r\n}\r\n\r\nfunction useSearch (latestKeypress: string): UseSearch {\r\n  const [keyboardIndex, setKeyboardIndex] = useState<number>(0)\r\n  const [searchTerm, setSearchTerm] = useState<string>('')\r\n  const [searchTarget, setSearchTarget] = useState<SearchTarget | null>(null)\r\n  const inputElement = useRef<HTMLInputElement>(null)\r\n  const { links } = useHiddenLinks()\r\n  const visibleLinks = getAllLinks().filter(link => !links.includes(link.url))\r\n\r\n  const fuzzyOptions: Fuzzysort.KeyOptions = {\r\n    key: 'title', allowTypo: false, limit: 6\r\n  }\r\n\r\n  const results = searchTerm !== '' && searchTarget === null\r\n    ? fuzzy.go(searchTerm, visibleLinks, fuzzyOptions)\r\n    : null\r\n\r\n  const focusedResult = results?.[keyboardIndex] ?? null\r\n\r\n  useEffect(() => {\r\n    inputElement.current?.focus()\r\n    setSearchTerm(latestKeypress)\r\n  }, [latestKeypress])\r\n\r\n  return {\r\n    searchTerm,\r\n    setSearchTerm,\r\n    searchTarget,\r\n    setSearchTarget,\r\n    keyboardIndex,\r\n    setKeyboardIndex,\r\n    results,\r\n    focusedResult,\r\n    inputElement\r\n  }\r\n}\r\n\r\nfunction getUrl (\r\n  focusedItem: LinkItem | null,\r\n  searchTarget?: SearchTarget | null,\r\n  searchTerm?: string\r\n): string | null {\r\n  if (\r\n    searchTarget !== null &&\r\n    searchTarget !== undefined &&\r\n    searchTerm !== undefined &&\r\n    searchTerm !== ''\r\n  ) {\r\n    return searchTarget.searchUrl.replace(/\\{search\\}/, searchTerm)\r\n  }\r\n\r\n  if (focusedItem !== null) {\r\n    return focusedItem.url\r\n  }\r\n\r\n  return null\r\n}\r\n","import { mdiFormatListChecks, mdiMagnify } from '@mdi/js'\r\nimport React, { FC, useEffect, useState } from 'react'\r\nimport { AppAction } from './components/AppAction'\r\nimport { AppActions } from './components/AppActions'\r\nimport { AppContent } from './components/AppContent'\r\nimport { AppFooter } from './components/AppFooter'\r\nimport { AppHeader } from './components/AppHeader'\r\nimport { FooterDivider } from './components/FooterDivider'\r\nimport { FooterLink } from './components/FooterLink'\r\nimport { FooterText } from './components/FooterText'\r\nimport { LinkList } from './components/LinkList'\r\nimport { Search } from './components/Search'\r\nimport { links } from './links'\r\nimport { setMode, toggleMode, useCurrentMode, AppMode } from './stores/currentModeStore'\r\nimport { HiddenLinks, useHiddenLinks } from './stores/hiddenLinksStore'\r\n\r\nexport const WebdevHome: FC = () => {\r\n  const { handleCustomizeAction, hiddenLinks } = useCustomizeFeature()\r\n  const { handleSearchAction, latestKeypress } = useSearchFeature()\r\n  const { mode } = useCurrentMode()\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <AppHeader />\r\n\r\n      <AppActions>\r\n        <AppAction\r\n          icon={mdiMagnify}\r\n          action={handleSearchAction}\r\n          active={mode === AppMode.search}\r\n        />\r\n        <AppAction\r\n          icon={mdiFormatListChecks}\r\n          action={handleCustomizeAction}\r\n          active={mode === AppMode.customize}\r\n        />\r\n      </AppActions>\r\n\r\n      {mode === AppMode.default || mode === AppMode.customize ? (\r\n        <AppContent>\r\n          <LinkList links={links.items} hiddenLinks={hiddenLinks.links} />\r\n        </AppContent>\r\n      ) : (\r\n        <Search latestKeypress={latestKeypress} />\r\n      )}\r\n\r\n      <AppFooter>\r\n        <FooterText>\r\n          My personal startpage\r\n        </FooterText>\r\n        <FooterLink\r\n          text=\"GitHub\"\r\n          url=\"https://github.com/AnXh3L0\"\r\n        />\r\n      </AppFooter>\r\n    </div>\r\n  )\r\n}\r\n\r\n// #region customize feature\r\ninterface CustomizeFeature {\r\n  hiddenLinks: HiddenLinks\r\n  handleCustomizeAction (): void\r\n}\r\n\r\nfunction useCustomizeFeature (): CustomizeFeature {\r\n  const hiddenLinks = useHiddenLinks()\r\n  const { mode } = useCurrentMode()\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('keydown', handleGlobalKeydown)\r\n\r\n    function handleGlobalKeydown (event: KeyboardEvent): void {\r\n      if (event.key === 'Escape' && mode === AppMode.customize) {\r\n        setMode(AppMode.default)\r\n      }\r\n    }\r\n\r\n    return () => {\r\n      document.removeEventListener('keydown', handleGlobalKeydown)\r\n    }\r\n  }, [mode])\r\n\r\n  function handleCustomizeAction (): void {\r\n    toggleMode(AppMode.customize)\r\n  }\r\n\r\n  return { hiddenLinks, handleCustomizeAction }\r\n}\r\n// #endregion customize feature\r\n\r\n// #region search feature\r\ninterface SearchFeature {\r\n  handleSearchAction (): void\r\n  latestKeypress: string\r\n}\r\n\r\nfunction useSearchFeature (): SearchFeature {\r\n  const [latestKeypress, setLatestKeypress] = useState<string>('')\r\n  const { mode } = useCurrentMode()\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('keypress', handleGlobalKeypress)\r\n\r\n    function handleGlobalKeypress (event: KeyboardEvent): void {\r\n      if (mode === AppMode.default) {\r\n        if (event.key === '\\n') { return }\r\n        setLatestKeypress(event.key)\r\n        setMode(AppMode.search)\r\n      }\r\n    }\r\n\r\n    return (): void => {\r\n      window.removeEventListener('keypress', handleGlobalKeypress)\r\n    }\r\n  }, [mode])\r\n\r\n  function handleSearchAction (): void {\r\n    setLatestKeypress('')\r\n    toggleMode(AppMode.search)\r\n  }\r\n\r\n  return { handleSearchAction, latestKeypress }\r\n}\r\n// #endregion search feature\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { WebdevHome } from './App'\r\nimport './sass/index.scss'\r\n\r\nReactDOM.render(<WebdevHome />, document.getElementById('root'))\r\n"],"sourceRoot":""}